# Import necessary libraries
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# Load and preprocess the dataset
(train_images, train_labels), (test_images, test_labels)=mnist.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images=train_images / 255.0, test_images / 255.0

# Build the model
model=keras.Sequential([
layers.Flatten(input_shape=(28, 28)), # Flatten the 28x28 image into a 1D array
layers.Dense(128, activation='relu'), # Fully connected layer with ReLU activation
layers.Dropout(0.2), # Dropout layer for regularization
layers.Dense(10, activation='softmax') # Output layer with 10 units for 10 digits
])

# Compile the model
model.compile(optimizer='adam',
loss='sparse_categorical_crossentropy',
metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=5)

# Evaluate the model
test_loss, test_acc=model.evaluate(test_images, test_labels)
print(f'Test accuracy: {test_acc}')
# Make predictions
predictions=model.predict(test_images)

# Visualize some predictions
n=10
plt.figure(figsize=(15, 3))
for i in range(n):
	plt.subplot(1, n, i+1)
	plt.imshow(test_images[i], cmap='gray')
	plt.title(f'Pred: {tf.argmax(predictions[i])}, True: {test_labels[i]}')
plt.show()